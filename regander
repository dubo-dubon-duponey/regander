#!/usr/bin/env bash

#####################################
# System constants
#####################################
_REGANDER_VERSION=0.0.1

MIME_MANIFEST_V1="application/vnd.docker.distribution.manifest.v1+json"
MIME_MANIFEST_V2="application/vnd.docker.distribution.manifest.v2+json"
MIME_MANIFEST_LIST="application/vnd.docker.distribution.manifest.list.v2+json"
MIME_MANIFEST_CONFIG_V1="application/vnd.docker.container.image.v1+json"
MIME_LAYER="application/vnd.docker.image.rootfs.diff.tar.gzip"
MIME_FOREIGN_LAYER="application/vnd.docker.image.rootfs.foreign.diff.tar.gzip"
MIME_PLUGIN="application/vnd.docker.plugin.v1+json"


#####################################
# Basic helpers
#####################################

# Prefix a date to a log line
ui::stamp(){
  >&2 echo "[$(date)] $@"
}

# Log to debug (honor the DEBUG environment variable)
ui::debug(){
  if [ -n "$DEBUG" ] && [ -z "${ARGV_S+x}" ] ; then
    local i
    for i in "$@"; do
      ui::stamp "[DEBUG]" "$i"
    done
  fi
}

# Log to info (fancy color if TERM)
ui::info(){
  if [ -z "${ARGV_S+x}" ] ; then
    [ -z "$TERM" ] || ( [ -t 2 ] && >&2 tput setaf 2 )
    local i
    for i in "$@"; do
      ui::stamp "[INFO]" "$i"
    done
    [ -z "$TERM" ] || ( [ -t 2 ] && >&2 tput op )
  fi
}

# Log to warning (fancy color if TERM)
ui::warning(){
  if [ -z "${ARGV_S+x}" ] ; then
    [ -z "$TERM" ] || ( [ -t 2 ] && >&2 tput setaf 3 )
    local i
    for i in "$@"; do
      ui::stamp "[WARNING]" "$i"
    done
    [ -z "$TERM" ] || ( [ -t 2 ] && >&2 tput op )
  fi
}

# Fatal error (fancy color if TERM)
ui::fatal(){
  [ -z "$TERM" ] || ( [ -t 2 ] && >&2 tput setaf 1 )
  local i
  for i in "$@"; do
    ui::stamp "[FATAL]" "$i"
  done
  [ -z "$TERM" ] || ( [ -t 2 ] && >&2 tput op )
  exit 1
}

# Output through jq to stdout
ui::prettyjson() {
  raw=$2
  if [ -t 1 ]; then
    # Pretty it if we are not piped
    echo "$1" | jq
  else
    # If piped, and we want it raw (for checksum validation, passthrough)
    if [ -n "$raw" ]; then
      echo -n "$1"
    else
    # Otherwise, still format through jq
      echo "$1" | jq "."
    fi
  fi
}

# Output through jq to stderr
ui::errjson(){
  if [ -z "${ARGV_S+x}" ]; then
    >&2 echo "$1" | jq "."
  fi
}

# Command-line argument parsing
for i in $@
do
  if [ ${i:0:1} == "-" ]; then
    # Get everything after the leading -
    name=${i:1}
    # Remove a possible second char -
    [ ${name:0:1} != "-" ] || name=${name:1}
    # Get the value, if we have an equal sign
    value=
    [[ $name == *"="* ]] && value=${name#*=}
    # Now, Get the name
    name=${name%=*}
    # Clean up the name: replace dash by underscore and uppercase everything
    name=$(echo $name | tr "-" "_" | tr '[:lower:]' '[:upper:]')

    # Set the variable
    declare "ARGV_$name"="$value"
    # Shift the arg from the stack and move onto the next
    shift
  fi
done

# Makes the named argument mandatory on the command-line
require::argument()
{
  var="ARGV_$(echo $1 | tr '[:lower:]' '[:upper:]')"
  if [ -z "${!var}" ]; then
    ui::fatal "Argument $(echo $1 | tr '[:upper:]' '[:lower:]') is required"
  fi
}

#####################################
# Generic HTTP client
# Consumer gets the following variables:
# - HTTP_STATUS: 3 digit status code after redirects
# - HTTP_BODY: raw body
# - HTTP_HEADERS: list of the response headers keys
# - HTTP_HEADER_XXX - where XXX is the header key, for all headers that have been set
#####################################
http::bin() {
  local url=$1
  local method=$2
  local head1=$3
  local head2=$4
  ui::debug "[HTTP] curl -L -s -H \"$head1\" \"$url\""
  curl -L -s -H "User-Agent: regander/$_REGANDER_VERSION" -H "$head2" -H "$head1" "$url" 2>&1
  if [[ $? != 0 ]]; then
    ui::fatal "Network issue... curl exited abnormaly. Recommended: check your pooch whereabouts. Now check these chewed-up network cables."
  fi
}

http::request() {
  # Reset previous request headers and body
  local i
  for i in $HTTP_HEADERS; do
    eval HTTP_HEADER_$i=
  done
  HTTP_HEADERS=
  HTTP_BODY=

  # Break on new line
  OIFS=$IFS
  IFS='
'

  # Local scope only
  local url=$1
  local method=$2
  local head1=$3
  local head2=$4
  local head3=$5
  local payload=$6

  local key
  local value
  local isRedirect
  local isBody
  local result

  # Special case HEAD, thank you damn curl
  ui::debug "[HTTP] ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★"
  local debmeth="-X $method"
  if [ -n "$DEBUG_AUTH" ]; then
    local debauth="-H \"$head2\""
  fi

  if [ "$method" == "HEAD" ]; then
    debmeth=-I
    ui::debug "[HTTP] curl $debmeth -i -L -s -H \"$head1\" -H \"$head3\" $debauth $debput \"$url\""
    result=$(curl -I          -i -L -H "User-Agent: regander/$_REGANDER_VERSION" -s -H "$head2" -H "$head3" -H "$head1"         "$url" 2>&1)
  elif [ "$method" == "PUT" ]; then
    local debput="--data-raw '$payload'"
    local payit="'$payload'"
    ui::debug "[HTTP] curl -X PUT -i -L -s -H \"$head1\" -H \"$head3\" $debauth $debput \"$url\""
    result=$(curl -X $method  -i -L -s -H "User-Agent: regander/$_REGANDER_VERSION" -H "$head2" -H "$head3" -H "$head1" --data-raw "$payload" "$url" 2>&1)
  else
    ui::debug "[HTTP] curl $debmeth -i -L -s -H \"$head1\" -H \"$head3\" $debauth $debput \"$url\""
    result=$(curl -X $method  -i -L -H "User-Agent: regander/$_REGANDER_VERSION" -s -H "$head2" -H "$head3" -H "$head1"         "$url" 2>&1)
  fi

  # ui::debug "[HTTP] ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★"
  if [[ $? != 0 ]]; then
    ui::fatal "Network issue... curl exited abnormaly. Recommended: check your pooch whereabouts. Now check these chewed-up network cables."
  fi

  # Process lines
  for i in $result; do
    # Are we in the body? Aggregate and move on
    if [ ! -z "$isBody" ]; then
      if [ -z "$HTTP_BODY" ]; then
        HTTP_BODY="${i}"
      else
        HTTP_BODY="${HTTP_BODY}"$'\n'"${i}"
      fi
      continue
    fi

    # Thank you damn HTTP spec
    i=$(echo $i | tr "\r" "\n")

    # Empty line? Then that's the end of headers
    if [ -z "$i" ]; then
      # If this was not a redirect, then we are going to start processing the body
      if [ -z "$isRedirect" ]; then
        # ui::debug "Will now consume body"
        isBody=true
      fi
      continue
    fi

    # Ok, headers
    # ui::debug "Reading line: $i"

    # This looks like a header
    if [[ "$i" == *":"* ]]; then
      key=$(echo ${i%%:*} | tr "-" "_" | tr '[:lower:]' '[:upper:]')
      value=${i#*: }
      ui::debug "[HTTP] response header: $key: $value"
      if [ -z "$isRedirect" ]; then
        [ -z "$HTTP_HEADERS" ] && HTTP_HEADERS=$key || HTTP_HEADERS="$HTTP_HEADERS $key"
        eval HTTP_HEADER_$key=\'$value\'
      else
        if [ $key == "LOCATION" ]; then
          ui::info "Redirecting to $value"
          HTTP_REDIRECTED=$value
        fi
      fi
      continue
    fi

    # Not a header, then it's a status line
    isRedirect=
    HTTP_STATUS=$(echo $i | grep -E "[0-9]+$")
    HTTP_STATUS=${i#* }
    HTTP_STATUS=${HTTP_STATUS%% *}
    [[ ${HTTP_STATUS:0:1} == "3" ]] && isRedirect=true
    ui::debug "[HTTP] final status: $HTTP_STATUS"
    if [ ! -z "$isRedirect" ]; then
      ui::debug "[HTTP] we got a redirect. Ignoring response headers."
    fi
    continue
  done

  IFS=$OIFS
}

http::dump() {
  ui::warning "[HTTP] Status code was: $HTTP_STATUS"
  ui::warning "[HTTP] Headers as follow:"
  for i in $HTTP_HEADERS; do
    eval ui::warning \"$i \$HTTP_HEADER_$i\"
  done
  ui::warning "[HTTP] Body below:"
  ui::warning "$HTTP_BODY"
}


#####################################
# Authentication helper
#####################################

_registry::authenticate() {
  # Query the auth server (1) for the service (2) with the scope (3..n)
  # XXX why on earth is garant not able to take a single scope param with spaces? this is foobared Docker!
  local url=${1}?service=${2}
  shift
  shift
  for i in "$@"; do
    url="$url&scope=$(http::uriencode $i)"
  done

  while true; do
    local authHeader=
    if [ -z "$REGISTRY_USERNAME" ]; then
      # No username? Then ask for one.
      # TODO implement osxkeychain integration
      # XXX doesn't work of course if stderr is redirected
      read -p "Please provide your username for the registry at $1 (or press enter for anonymous): " REGISTRY_USERNAME
      if [ -n "$REGISTRY_USERNAME" ]; then
        read -s -p "password: " REGISTRY_PASSWORD
        >&2 echo
      else
        REGISTRY_USERNAME="anonymous"
      fi
    fi

    if [ "$REGISTRY_USERNAME" != "anonymous" ]; then
      # Generate the basic auth token with the known user
      authHeader="Authorization: Basic $(echo -n "${REGISTRY_USERNAME}:${REGISTRY_PASSWORD}" | base64)"
    fi

    http::request "$url" GET "" "$authHeader"


    if [ $HTTP_STATUS == "400" ]; then
      http::dump
      ui::fatal "Something is borked badly"
    fi
    # A 200 means authentication was successful
    if [ $HTTP_STATUS == "200" ]; then
      REGISTRY_TOKEN=$(echo $HTTP_BODY | jq '.token' | xargs echo)

      local decoded=($(echo $REGISTRY_TOKEN | tr "." " "))
      local header
      local payload
      # TODO implement signature verification
      # local sig
      # XXX WTFFFFF base64
      header=$(echo ${decoded[0]}== | base64 -D 2>/dev/null)
      if [[ $? != 0 ]]; then
        header=$(echo ${decoded[0]} | base64 -D)
      fi
      payload=$(echo ${decoded[1]}== | base64 -D 2>/dev/null)
      if [[ $? != 0 ]]; then
        payload=$(echo ${decoded[1]} | base64 -D)
      fi
      #sig=$(echo ${decoded[2]}== | base64 -D 2>/dev/null)
      #if [[ $? != 0 ]]; then
      #  sig=$(echo ${decoded[2]} | base64 -D)
      #fi

      if [ -n "$DEBUG_AUTH" ] && [ -z "${ARGV_S+x}" ]; then
        ui::debug "[JWT] header"
        >&2 echo $header | jq "."
        ui::debug "[JWT] payload"
        >&2 echo $payload | jq "."
      fi

      # Grab the access response
      access=$(echo $payload | jq '.access')

      if [ -z "$scope" ] || [ "$access" != "[]" ]; then
        ui::debug "[JWT] access granted for: $access"
        break
      else
        # If no access... we got denied...
        ui::warning "The user $REGISTRY_USERNAME was denied permission for the requested scope: $3. Maybe the target doesn't exist, or you are not authorized to access it."
        REGISTRY_USERNAME=
      fi
    else
      # Reset username, since it's invalid
      ui::warning "Wrong username or password."
      REGISTRY_USERNAME=
    fi
  done
}

#####################################
# Generic registry client helper, with authentication and http handling
#####################################

http::uriencode() {
  s="${@//'%'/%25}"
  s="${s//' '/%20}"
  s="${s//'"'/%22}"
  s="${s//'#'/%23}"
  s="${s//'$'/%24}"
  s="${s//'&'/%26}"
  s="${s//'+'/%2B}"
  s="${s//','/%2C}"
  s="${s//'/'/%2F}"
  s="${s//':'/%3A}"
  s="${s//';'/%3B}"
  s="${s//'='/%3D}"
  s="${s//'?'/%3F}"
  s="${s//'@'/%40}"
  s="${s//'['/%5B}"
  s="${s//']'/%5D}"
  printf %s "$s"
}

_registry::http(){
  # Do the request, whatever it is
  http::request "$1" "$2" "$_REGANDER_ACCEPT" "Authorization: Bearer $REGISTRY_TOKEN" "$3" "$4"
  # If it's a failed request, check what we have, starting with reading the header
  local auth=${HTTP_HEADER_WWW_AUTHENTICATE}
  local i
  local service=
  local realm=
  local scope=
  local error=

  while [ "$auth" != "$value\"" ]; do
    key=${auth%%=*}
    key=${key#*Bearer }
    value=${auth#*=\"}
    auth=${value#*\",}
    value=${value%%\"*}
    eval $key=\"$value\"
  done

  ui::debug "Parsed authentication:" "Service: $service" "Realm: $realm" "Scope: $scope" "Error: $error"

  if [ -n "$error" ]; then
    ui::debug "Got an authorization error: $error. Going to re-authenticate with upgraded scope."
  fi

  if [ "${HTTP_STATUS}" == "401" ] || [ -n "$error" ]; then
    _registry::authenticate $realm $service $scope

    # Replay the transaction again with an hopefully valid token this time
    http::request $1 $2 "$_REGANDER_ACCEPT" "Authorization: Bearer $REGISTRY_TOKEN" "$3" "$4"
  fi

  if [ "${HTTP_STATUS:0:1}" == "5" ]; then
    http::dump
    ui::fatal "BONKERS! A 5xx response code. You broke that registry. See above for a full dump."
  fi

  if [ "${HTTP_STATUS}" == "429" ]; then
    ui::fatal "WOOOO! Slow down tiger! Registry says you are doing too many requests."
  fi
}

#####################################
# Argument processing and handling
#####################################

help::section(){
  tput setaf 1
  echo "-------------------------------------------"
  echo $@
  echo "-------------------------------------------"
  tput op
  echo
}

help::item(){
  tput setaf 2
  echo ">>>>> $@ <<<<<"
  tput op
  echo
}

help::example(){
  tput setaf 3
  echo "        $ $@"
  tput op
  echo
}

# Need help?
if [ -n "${ARGV_HELP+x}" ] || [ -n "${ARGV_H+x}" ]; then
  echo "regander $_REGANDER_VERSION"
  echo "    > a fancy piece of shcript implementing a standalone Docker registry protocol client"
  echo
  echo "Usage:"
  help::example "regander [options] endpoint METHOD [object] [reference] [origin-object]"

  help::section "Endpoints"

  help::item "1. Version (GET)"

  help::example "regander [--registry=foo] [-s] version GET"
  echo "  Examples:"
  echo "    a. Get the Hub protocol version, interactively asking for credentials"
  help::example "regander -s version GET"
  echo "    b. Get the protocol version from registry-1.docker.io using anonymous and pipe it to jq"
  help::example "REGISTRY_USERNAME=anonymous regander -s --registry=https://registry-1.docker.io version GET | jq"

  help::item "2. Tag list (GET)"

  help::example "regander [--registry=foo] [-s] tags GET imagename"
  echo "  Examples:"
  echo "    a. Get all tags for the official nginx image"
  help::example "regander -s tags GET library/nginx"
  echo "    b. Same, but filter out only the tags containing 'alpine' in their name"
  help::example "REGISTRY_USERNAME=anonymous regander -s tags GET library/nginx | jq '.tags | map(select(. | contains(\"alpine\")))'"

  help::item "3a. Manifest (HEAD)"

  help::example "regander [--registry=foo] [--downgrade=true] [-s] manifest HEAD imagename [reference]"
  echo "      Examples:"
  echo "          a. Get all info for nginx latest"
  help::example "regander -s manifest HEAD library/nginx"
  echo "          b. Get the digest for the 'alpine' tag of image 'nginx':"
  help::example "REGISTRY_USERNAME=anonymous regander -s manifest HEAD library/nginx alpine | jq .digest"

  help::item "3b. Manifest (GET)"

  help::example "regander [--registry=foo] [--downgrade=true] [-s] manifest GET imagename [reference]"
  echo "      Examples:"
  echo "          a. Get the manifest for the latest tag of image nginx:"
  help::example "regander -s manifest GET library/nginx"
  echo "          b. Get the v1 manifest for the latest tag of image nginx, and extract the layers array:"
  help::example "REGISTRY_USERNAME=anonymous regander -s --registry=https://registry-1.docker.io --downgrade=true manifest GET library/nginx latest | jq .fsLayers"

  help::item "3c. Manifest (DELETE)"

  help::example "regander [--registry=foo] [-s] manifest DELETE imagename reference"
  echo "      Examples:"
  echo "          a. Delete a tag"
  help::example "regander -s manifest DELETE you/yourimage sometag"
  echo "                  (note: Hub doesn't support this apparently)"
  echo "          b. Delete by digest"
  help::example "regander -s manifest DELETE you/yourimage sha256:foobar"
  echo "                  (note: Hub doesn't support this apparently)"

  help::item "3d. Manifest (PUT)"

  help::example "regander [--registry=foo] [-s] manifest PUT imagename reference < file"
  echo "      Examples:"
  echo "          a. Put a manifest from a file"
  help::example "REGISTRY_USERNAME=you REGISTRY_PASSWORD=yourpass regander -s manifest PUT you/yourimage sometag < localmanifest.json"
  echo "          b. From stdin"
  help::example "echo 'Manifest content' | REGISTRY_USERNAME=you REGISTRY_PASSWORD=yourpass regander -s manifest PUT you/yourimage sometag"
  echo "          c. Black magic! On the fly copy from image A to B."
  help::example "REGISTRY_USERNAME=anonymous regander -s manifest GET library/nginx latest | REGISTRY_USERNAME=you REGISTRY_PASSWORD=yourpassword regander -s manifest PUT you/yourimage sometag"
  echo "                  (note: this assumes all blobs are mounted already in the destination)"
  echo "          d. Same as c, for v1."
  help::example "REGISTRY_USERNAME=anonymous regander -s --downgrade=true manifest GET library/nginx latest | REGISTRY_USERNAME=you REGISTRY_PASSWORD=yourpassword regander -s --downgrade=true manifest PUT you/yourimage sometag"
  echo "                  (note: this assumes all blobs are mounted already in the destination)"
  echo "                  (note: Hub doesn't support this anymore. This is untested."

  help::item "4a. Blob (HEAD)"

  help::example "regander [--registry=foo] [-s] blob HEAD imagename reference"
  echo "      Examples:"
  echo "          a. Get the final location after redirect for a blob:"
  help::example "REGISTRY_USERNAME=anonymous regander -s blob HEAD library/nginx sha256:911c6d0c7995e5d9763c1864d54fb6deccda04a55d7955123a8e22dd9d44c497 | jq .location"

  help::item "4b. Blob (HEAD)"

  help::example "regander [--registry=foo] [-s] blob GET imagename reference"
  echo "      Examples:"
  echo "          a. Download a blob to a file"
  help::example "REGISTRY_USERNAME=anonymous regander -s blob GET library/nginx sha256:911c6d0c7995e5d9763c1864d54fb6deccda04a55d7955123a8e22dd9d44c497 > layer.tgz"

  help::item "4c. Blob (MOUNT)"

  help::example "regander [--registry=foo] [-s] blob MOUNT imagename reference origin"
  echo "      Examples:"
  echo "          a. Mount a layer from nginx into image yourimage"
  help::example "regander -s blob MOUNT you/yourimage sha256:911c6d0c7995e5d9763c1864d54fb6deccda04a55d7955123a8e22dd9d44c497 library/nginx"

  help::item "4d. Blob (DELETE)"

  help::example "regander [--registry=foo] [-s] blob DELETE imagename reference"
  echo "      Examples:"
  echo "          a. Unmount a layer from yourimage"
  help::example "regander -s blob DELETE you/yourimage sha256:911c6d0c7995e5d9763c1864d54fb6deccda04a55d7955123a8e22dd9d44c497"
  echo "                  (note: Hub doesn't support this apparently)"

  help::section "Options details"

  echo " > --registry=foo     Points to a specific registry address. If ommitted, will default to Docker Hub."
  echo " > --downgrade=true   Downgrade operations from v2 to v1 manifest schema. Only has an effect when using the manifest endpoint, ignored otherwise."
  echo " > -s                 Will not log out anything and only output json payloads."
  echo " > --help             Will display all this jazz..."

  help::section "Logging and logging options"

  echo "By default, all logging is sent to stderr."
  echo "Examples of logging manipulation:"
  echo "    a. Disable all logging"
  help::example "regander -s version GET"
  echo "    b. Enable debug logging (verbose!)"
  help::example "DEBUG=true regander version GET"
  echo "    c. Also enable authentication debugging info (this *will* leak authentication tokens!)"
  help::example "DEBUG=true DEBUG_AUTH=true regander version GET"
  echo "    d. Redirect all logging to /dev/null (essentially has the same result as using -s)"
  help::example "regander version GET 2>/dev/null"
  echo "    e. Log to a file and redirect the result of the command to a file"
  help::example "regander version GET 2>logs.txt >version.json"

  help::section "Non interactive authentication"

  echo "You can use the REGISTRY_USERNAME and REGISTRY_PASSWORD environment variables if you want to use this non-interactively (typically if you are piping the output to something else)."
  echo "Of course, this is not super safe as your credentials will appear in your environment, or in the process list of the host you are running this on."
  echo "But you knew that, right?"
  echo "Example:"
  help::example "REGISTRY_USERNAME=anonymous regander -s version GET | jq"
  echo
  exit
fi

if [ -z "$ARGV_DOWNGRADE" ]; then
  _REGANDER_ACCEPT="Accept: application/vnd.docker.distribution.manifest.v2+json"
fi

___=${ARGV_REGISTRY:=https://registry-1.docker.io}
# require::argument registry


#####################################
# High-level registry API
#####################################
registry::version::GET(){
  _registry::http ${1}/v2/ HEAD
  if [ $HTTP_STATUS == "404" ]; then
    ui::fatal "This registry doesn't support the Registry API (version endpoint is 404)."
  fi

  if [ "$HTTP_HEADER_DOCKER_DISTRIBUTION_API_VERSION" != "registry/2.0" ]; then
    ui::fatal "This registry doesn't support the Registry API (version header returned: \"$HTTP_HEADER_DOCKER_DISTRIBUTION_API_VERSION)\""
  fi

  ui::info "Version endpoint works and returned expected registry API information"
  echo '"registry/2.0"'
}


registry::catalog::GET() {
  _registry::http ${1}/v2/_catalog GET
  if [ $HTTP_STATUS == "404" ]; then
    ui::warning "Catalog endpoint is missing."
  else
    ui::info "GET catalog:"
    ui::errjson "$HTTP_BODY"
    ui::prettyjson "$HTTP_BODY"
  fi
}

registry::tags::GET() {
  local name=$2
  _registry::http ${1}/v2/$name/tags/list GET
  if [ $HTTP_STATUS == "404" ]; then
    ui::warning "The manifest:tag you requested ($name:$ref) does not exist!"
  else
    ui::info "GET tagslist $name:$ref:"
    ui::errjson "$HTTP_BODY"
    ui::prettyjson "$HTTP_BODY"
  fi
}

registry::manifest::HEAD() {
  local name=$2
  local ref=${3:-latest} # Tag or digest
  _registry::http ${1}/v2/$name/manifests/$ref HEAD
  if [ $HTTP_STATUS == "404" ]; then
    ui::warning "The manifest:tag you requested ($name:$ref) does not exist!"
  elif [ $HTTP_STATUS == "400" ]; then
    ui::warning "The manifest:tag you requested ($name:$ref) has a malformed name."
  else
    ui::info "HEAD manifest $name:$ref:"
    ui::info " * Has a length of: $HTTP_HEADER_CONTENT_LENGTH bytes"
    ui::info " * Is of content-type: $HTTP_HEADER_CONTENT_TYPE"
    ui::info " * Has digest: $HTTP_HEADER_DOCKER_CONTENT_DIGEST"
    ui::prettyjson "{\"type\": \"$HTTP_HEADER_CONTENT_TYPE\", \"length\": \"$HTTP_HEADER_CONTENT_LENGTH\", \"digest\": \"$HTTP_HEADER_DOCKER_CONTENT_DIGEST\"}"
  fi
}

registry::manifest::GET() {
  local name=$2
  local ref=${3:-latest} # Tag or digest
  _registry::http ${1}/v2/$name/manifests/$ref GET
  if [ $HTTP_STATUS == "404" ]; then
    ui::warning "The manifest:tag you requested ($name:$ref) does not exist!"
  else
    ui::info "GET manifest $name:$ref:"
    ui::info " * Has a length of: $HTTP_HEADER_CONTENT_LENGTH bytes"
    ui::info " * Is of content-type: $HTTP_HEADER_CONTENT_TYPE"
    ui::info " * Has digest: $HTTP_HEADER_DOCKER_CONTENT_DIGEST"
    ui::info " * Manifest content:"
    ui::errjson "$HTTP_BODY"
    echo -n "$HTTP_BODY"
    # ui::prettyjson "$HTTP_BODY" "make it raw"
  fi
}

registry::manifest::DELETE() {
  local name=$2
  local ref=${3:-latest} # Tag or digest
  _registry::http ${1}/v2/$name/manifests/$ref DELETE

  if [ $HTTP_STATUS != "202" ]; then
    http::dump
    ui::fatal "Something went sideways"
  fi
}

registry::manifest::PUT() {
  local name=$2
  local ref=${3:-latest} # Tag or digest
  local mime=$MIME_MANIFEST_V2
  if [ -n "$ARGV_DOWNGRADE" ]; then
    mime=$MIME_MANIFEST_V1
  fi
  local payload="$(cat /dev/stdin | jq -c .)"
  _registry::http ${1}/v2/$name/manifests/$ref PUT "Content-type: $mime" "$payload"
  if [ $HTTP_STATUS == "400" ]; then
    http::dump
    ui::fatal "Dude, your manifest is broken. Server is refusing it."
  elif [ $HTTP_STATUS != "201" ]; then
    http::dump
    ui::fatal "Houston? Allo?"
  fi

  ui::info "Manifest succesfully posted"
  ui::info " * Location: $HTTP_HEADER_LOCATION"
  ui::info " * Digest: $HTTP_HEADER_DOCKER_CONTENT_DIGEST"
  ui::prettyjson "{\"location\": \"$HTTP_HEADER_LOCATION\", \"digest:\": \"$HTTP_HEADER_DOCKER_CONTENT_DIGEST\"}"
}

registry::blob::HEAD() {
  local name=$2
  local ref=$3 # digest
  _registry::http ${1}/v2/$name/blobs/$ref HEAD
  if [ $HTTP_STATUS == "404" ]; then
    ui::warning "The blob you requested ($name:$ref) does not exist!"
  elif [ $HTTP_STATUS == "400" ]; then
    ui::warning "The blob you requested ($name:$ref) has a malformed name."
  else
    ui::info "HEAD blob $name:$ref:"
    ui::info " * Has a length of: $HTTP_HEADER_CONTENT_LENGTH bytes"
    ui::info " * Is of content-type: $HTTP_HEADER_CONTENT_TYPE"
    local finally=${1}/v2/$name/blobs/$ref
    if [ -n "$HTTP_REDIRECTED" ]; then
      finally=$HTTP_REDIRECTED
    fi
    # XXX careful, this is possibly leaking private content with a signed key to access it
    ui::info " * Final location: REDACTED" # $finally
    ui::prettyjson "{\"type\": \"$HTTP_HEADER_CONTENT_TYPE\", \"length\": \"$HTTP_HEADER_CONTENT_LENGTH\", \"location\": \"$finally\"}"
  fi
}

registry::blob::GET() {
  # This one is tricky, since we don't want to process the curl output, right?
  local name=$2
  local ref=$3 # digest
  # Head it first
  _registry::http ${1}/v2/$name/blobs/$ref HEAD
  if [ $HTTP_STATUS == "404" ]; then
    ui::warning "The blob you requested ($name:$ref) does not exist!"
  elif [ $HTTP_STATUS == "400" ]; then
    ui::warning "The blob you requested ($name:$ref) has a malformed name."
  else
    ui::info "GET blob $name:$ref:"
    ui::info " * Has a length of: $HTTP_HEADER_CONTENT_LENGTH bytes"
    ui::info " * Is of content-type: $HTTP_HEADER_CONTENT_TYPE"
    # Where we redirected?
    local finally=${1}/v2/$name/blobs/$ref
    # XXX careful, this is possibly leaking private content url with a signed key
    if [ -n "$HTTP_REDIRECTED" ]; then
      finally=$HTTP_REDIRECTED
    fi
    ui::info " * Final location: REDACTED" # $finally
    # Don't send authentication out if we got redirected
    if [ -n "$HTTP_REDIRECTED" ]; then
      http::bin $finally GET "$_REGANDER_ACCEPT"
    else
      http::bin ${1}/v2/$name/blobs/$ref GET "$_REGANDER_ACCEPT" "Authorization: Bearer $REGISTRY_TOKEN"
    fi
  fi
}

registry::blob::MOUNT() {
  local name=$2
  local ref=$3 #
  local from=$4
  _registry::http "${1}/v2/$name/blobs/uploads/?mount=$ref&from=$from" POST
  if [ $HTTP_STATUS == "405" ]; then
    ui::fatal "This registry of yours does not support blob mounts. Maybe it's a cache? Or a very old dog?"
  elif [ $HTTP_STATUS == "400" ]; then
    http::dump
    ui::fatal "Errr... Malformed request. Something is wrong with your request boss!"
  elif [ $HTTP_STATUS == "404" ]; then
    http::dump
    ui::fatal "This thing you wanted to mount... Does not exist!"
  elif [ $HTTP_STATUS != "201" ]; then
    http::dump
    ui::fatal "Errr... errr... err..."
  fi
  ui::info "Mount blob $ref from $from into $name"
  ui::info " * Location: $HTTP_HEADER_LOCATION"
  ui::info " * Digest: $HTTP_HEADER_DOCKER_CONTENT_DIGEST"
  ui::info " * Length: $HTTP_HEADER_CONTENT_LENGTH"
  ui::prettyjson "{\"location\": \"$HTTP_HEADER_LOCATION\", \"length\": \"$HTTP_HEADER_CONTENT_LENGTH\", \"digest:\": \"$HTTP_HEADER_DOCKER_CONTENT_DIGEST\"}"
}

registry::blob::DELETE() {
  local name=$2
  local ref=$3 # digest DELETE /v2/<name>/blobs/<digest>
  _registry::http ${1}/v2/$name/blobs/$ref DELETE

  if [ $HTTP_STATUS != "202" ]; then
    http::dump
    ui::fatal "Something went sideways"
  fi
}

























registry::blob::POST() {
  local name=$2
  local ref=$3
  local digest=$(shasum -a 256 $4)
  local length=$(stat -f%z $4)


  _registry::http ${1}/v2/$name/blobs/uploads/?digest=$digest POST
  # Content-Length: <length of blob>
  # Content-Type: application/octet-stream

}





#while read line
#do
#  echo "$line"
#done < /dev/stdin





# registry::version::GET $ARGV_REGISTRY
registry::$1::$2 $ARGV_REGISTRY $3 $4 $5

#registry::manifest::head $ARGV_REGISTRY dmp42/shadowed-private latest
#registry::manifest::head $ARGV_REGISTRY dmp42/testagain v1.3.0
#registry::manifest::get $ARGV_REGISTRY library/nginx latest
#registry::manifest::head $ARGV_REGISTRY library/nginx "sha256:4a5573037f358b6cdfa2f3e8a9c33a5cf11bcd1675ca72ca76fbe5bd77d0d682"
#registry::manifest::head $ARGV_REGISTRY library/nginx foobardoesntexist
#registry::manifest::head $ARGV_REGISTRY library/nginx "sha256:123473037f358b6cdfa2f3e8a9c33a5cf11bcd1675ca72ca76fbe5bd77d0d682"


exit




getToken() {
    local reponame=$1
    local actions=$2
    local headers
    local response

    if [ -n "$username" ]; then
        headers="Authorization: Basic $(echo -n "${username}:${password}" | base64)"
    fi

    response=$(curl -s -H "$headers" "https://auth.docker.io/token?service=registry.docker.io&scope=repository:$reponame:$actions")

    echo $response | jq '.token' | xargs echo
}

httpGet() {
    local name=$1
    local type=$2
    local reference=$3
    local token=$4
    curl -i -L --progress-bar -H "Authorization: Bearer $token" "https://registry-1.docker.io/v2/$name/$type/$reference"
}


downloadResource() {
    local reponame=$1
    local type=$2
    local reference=$3

    echo "Downloading Reference"
    time curl -L --progress-bar -H "Authorization: Bearer $token" "https://registry-1.docker.io/v2/$reponame/$type/$reference" > download.tmp
}

imageInfo() {
    echo "------------------------------------------"
    echo "Image has:"
    cat download.tmp | jq '.fsLayers[].blobSum' | wc -l
    echo "... layers"
    cat download.tmp | jq '.fsLayers[].blobSum' | tr '"' " " | while read object; do
        echo "------------------------------------------"
        echo "Layer: $object"
        head $reponame blobs $object | grep -i "content-length"
    done
}




_h=$(cd "$(dirname "${BASH_SOURCE[0]:-$PWD}")" 2>/dev/null 1>&2 && pwd)
source "$_h/../fat/require"

user::belongstogroup sudo

ui::header "Docker user creation"


# No command line args? Prompt
[ !-z "$ARGV_USERNAME" ]  || ARGV_USERNAME=$ARGV_U
[ !-z "$ARGV_USERNAME" ]  || input::ask "Type in your new username" ARGV_USERNAME
[ !-z "$ARGV_USERNAME" ]  || ui::fatal "You need to provide a username"

# Ok, everything is in place
AC_CONTAINER_USERNAME=$ARGV_USERNAME

template::confirm-before-execute "$_h/../actions/user-container-create" \
  "Your new container user account is ready."







for i in "$@"
do
case $i in

  # Run this as root
  login)
    # Just create the first non root account
    registry::login --user=$FP_SYSTEM_ME --ssh="$FP_SYSTEM_SSH"
  ;;

  # Run this as your main user
  system-setup)
    FP_DOCKER_LICENSE=sub-595540a8-0209-4021-977a-458a2aea47e0

    # Configure the host
    base-setup

    # Prepare luks partitions
    create-luks-device --device=$FP_LUKS_DEVICE --name=$FP_LUKS_NAME

    # Move docker-data there
    change-docker-data-location --destination=/$FP_LUKS_NAME
    create-container-user --username=$FP_POTATO_USER

  ;;

  *)
    # Prepare the start and stop scripts
    cp ${BASH_SOURCE[0]}.env $HOME/fatpotato-setup.env
    start
    docker-compose -f docker-compose-setup.yml create fatpotato-manager

    cp ${BASH_SOURCE[0]}.env $HOME/fatpotato.env

    # potato-exec configure-all

    # Add your users here
    # potato-exec users-add dmp
    # potato-exec users-add tiger
  ;;
esac
done
